name: Run System Tests

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]
  workflow_dispatch:

jobs:

  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Prepare Logs Directory
        run: |
          mkdir -p ./logs
          sudo chown -R 1000:1000 ./logs

      - name: Create Docker Network
        run: |
          docker network create teamcity-network

      - name: Run TeamCity Server Container
        run: |
          docker run -d --name teamcity-server-instance --network teamcity-network -v ${{ github.workspace }}/logs:/opt/teamcity/logs -p 8111:8111 jetbrains/teamcity-server
          echo "Waiting for TeamCity server to start..."
          for i in {1..30}; do
                  if docker logs teamcity-server-instance 2>&1 | grep -q 'TeamCity process PID is'; then
                    echo "TeamCity server started successfully."
                    break
                  fi
                  echo "Waiting..."
                  sleep 5
                done
                echo "Docker Status:"
                docker ps -a
                echo "TeamCity Server Logs:"
                docker logs teamcity-server-instance
          
      - name: Check Port Availability
        run: |
          echo "Checking if port 8111 is open..."
          if nc -z localhost 8111; then
            echo "Port 8111 is open."
          else
            echo "Port 8111 is not open."
          fi

      - name: Run TeamCity Agent Container
        run: |
          docker run -d --name teamcity-agent-instance --network teamcity-network -e SERVER_URL="http://teamcity-server-instance:8111" jetbrains/teamcity-agent
          
      - name: Install Python Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.10 python3-pip
          pip install -r requirements.txt
          
      - name: Run Set Up Test
        run: |
          playwright install
          playwright install-deps
          pytest -v --alluredir=result tests/frontend/test_setup.py 

      - name: Retrieve Super User Token
        run: |
          timeout=180 
          while [ $timeout -gt 0 ]; do
            if docker logs teamcity-server-instance 2>&1 | grep -q 'Super user authentication token'; then
              echo "Token found in logs, extracting..."
              token=$(docker logs teamcity-server-instance 2>&1 | grep -oP 'Super user authentication token: \K[0-9]+')
              echo "Super user token: $token"
              echo "SUPER_ADMIN_TOKEN=$token" >> $GITHUB_ENV
              break
            else
              echo "Token not found, waiting..."
              sleep 10 # интервал проверки каждые 10 секунд
              timeout=$((timeout-10))
            fi
          done
          if [ $timeout -le 0 ]; then
            echo "Failed to retrieve super user token within the timeout period."
          fi
        shell: /usr/bin/bash -e {0}

      - name: Run Tests
        run: |
          pytest -v --alluredir=result --ignore=tests/frontend/test_setup.py

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report action from marketplace
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          allure_results: result
          allure_history: allure-history

      - name: Copy Swagger Coverage Report for GitHub Pages
        run: |
          mkdir -p gh-pages/swagger-coverage
          cp swagger-coverage-report-teamcityapi.html gh-pages/swagger-coverage/index.html
        if: always()

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: gh-pages
